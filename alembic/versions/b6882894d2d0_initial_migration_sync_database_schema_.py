"""Initial migration: sync database schema with models

Revision ID: b6882894d2d0
Revises: 
Create Date: 2025-10-20 12:11:29.221317

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b6882894d2d0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('password_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_personal', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_password_categories_id'), 'password_categories', ['id'], unique=False)
    op.create_table('passwords',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('url', sa.String(length=500), nullable=True),
    sa.Column('login', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('is_personal', sa.Boolean(), nullable=True),
    sa.Column('shared_with', sa.JSON(), nullable=True),
    sa.Column('active_users', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('company_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['password_categories.id'], ),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_passwords_id'), 'passwords', ['id'], unique=False)
    op.drop_table('quiz_attempts')
    op.drop_table('checklist_items')
    op.drop_table('news_comments')
    op.drop_index('_CourseToProgram_AB_unique', table_name='_CourseToProgram')
    op.drop_index('_CourseToProgram_B_index', table_name='_CourseToProgram')
    op.drop_table('_CourseToProgram')
    op.drop_table('programs')
    op.drop_table('quizzes')
    op.drop_table('knowledge_articles')
    op.drop_table('knowledge_folders')
    op.drop_table('task_comments')
    op.drop_table('news')
    op.drop_table('sprints')
    op.drop_table('time_logs')
    op.drop_table('lessons')
    op.drop_table('epics')
    op.drop_table('transactions')
    op.drop_index('task_watchers_task_id_employee_id_key', table_name='task_watchers')
    op.drop_table('task_watchers')
    op.drop_index('task_dependencies_task_id_depends_on_task_id_key', table_name='task_dependencies')
    op.drop_table('task_dependencies')
    op.drop_table('accounts')
    op.drop_table('courses')
    op.add_column('companies', sa.Column('logo_url', sa.String(length=500), nullable=True))
    op.alter_column('companies', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('companies', 'website',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('companies', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('companies', 'phone',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('companies', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('companies', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('companies', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.create_index(op.f('ix_companies_id'), 'companies', ['id'], unique=False)
    op.create_index(op.f('ix_companies_name'), 'companies', ['name'], unique=False)
    op.drop_column('companies', 'industry')
    op.drop_column('companies', 'tax_id')
    op.drop_column('companies', 'logo')
    op.alter_column('departments', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('departments', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('departments', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('departments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.create_index(op.f('ix_departments_id'), 'departments', ['id'], unique=False)
    op.create_index(op.f('ix_departments_name'), 'departments', ['name'], unique=False)
    op.drop_constraint('departments_parent_id_fkey', 'departments', type_='foreignkey')
    op.drop_constraint('departments_company_id_fkey', 'departments', type_='foreignkey')
    op.create_foreign_key(None, 'departments', 'departments', ['parent_id'], ['id'])
    op.create_foreign_key(None, 'departments', 'companies', ['company_id'], ['id'])
    op.create_foreign_key(None, 'departments', 'employees', ['manager_id'], ['id'])
    op.add_column('employees', sa.Column('first_name', sa.String(length=100), nullable=False))
    op.add_column('employees', sa.Column('last_name', sa.String(length=100), nullable=False))
    op.add_column('employees', sa.Column('middle_name', sa.String(length=100), nullable=True))
    op.add_column('employees', sa.Column('avatar_url', sa.String(length=500), nullable=True))
    op.add_column('employees', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('employees', sa.Column('user_id', sa.Integer(), nullable=True))
    op.alter_column('employees', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('employees', 'phone',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('employees', 'position',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=True)
    op.alter_column('employees', 'birth_date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.alter_column('employees', 'hire_date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.alter_column('employees', 'salary',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('employees', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('employees', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.drop_index('employees_email_key', table_name='employees')
    op.create_index(op.f('ix_employees_email'), 'employees', ['email'], unique=True)
    op.create_index(op.f('ix_employees_id'), 'employees', ['id'], unique=False)
    op.create_unique_constraint(None, 'employees', ['user_id'])
    op.drop_constraint('employees_company_id_fkey', 'employees', type_='foreignkey')
    op.drop_constraint('employees_department_id_fkey', 'employees', type_='foreignkey')
    op.create_foreign_key(None, 'employees', 'companies', ['company_id'], ['id'])
    op.create_foreign_key(None, 'employees', 'departments', ['department_id'], ['id'])
    op.create_foreign_key(None, 'employees', 'users', ['user_id'], ['id'])
    op.drop_column('employees', 'avatar')
    op.drop_column('employees', 'hr')
    op.drop_column('employees', 'termination_date')
    op.drop_column('employees', 'recruiter')
    op.drop_column('employees', 'name')
    op.drop_column('employees', 'schedule')
    op.drop_column('employees', 'status')
    op.add_column('tasks', sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('tasks', sa.Column('checklist', sa.JSON(), nullable=True))
    op.add_column('tasks', sa.Column('is_archived', sa.Boolean(), nullable=True))
    op.alter_column('tasks', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('tasks', 'status',
               existing_type=postgresql.ENUM('new', 'inProgress', 'review', 'completed', 'postponed', name='TaskStatus'),
               nullable=True,
               existing_server_default=sa.text('\'new\'::"TaskStatus"'))
    op.alter_column('tasks', 'priority',
               existing_type=sa.INTEGER(),
               type_=sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='taskpriority'),
               nullable=True,
               existing_server_default=sa.text('1'))
    op.alter_column('tasks', 'due_date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('tasks', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('tasks', 'is_favorite',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('tasks', 'assignee_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tasks', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    op.create_index(op.f('ix_tasks_title'), 'tasks', ['title'], unique=False)
    op.drop_constraint('tasks_epic_id_fkey', 'tasks', type_='foreignkey')
    op.drop_constraint('tasks_sprint_id_fkey', 'tasks', type_='foreignkey')
    op.drop_constraint('tasks_assignee_id_fkey', 'tasks', type_='foreignkey')
    op.drop_constraint('tasks_parent_task_id_fkey', 'tasks', type_='foreignkey')
    op.drop_constraint('tasks_company_id_fkey', 'tasks', type_='foreignkey')
    op.drop_constraint('tasks_creator_id_fkey', 'tasks', type_='foreignkey')
    op.create_foreign_key(None, 'tasks', 'companies', ['company_id'], ['id'])
    op.create_foreign_key(None, 'tasks', 'employees', ['assignee_id'], ['id'])
    op.create_foreign_key(None, 'tasks', 'employees', ['creator_id'], ['id'])
    op.drop_column('tasks', 'story_points')
    op.drop_column('tasks', 'parent_task_id')
    op.drop_column('tasks', 'category')
    op.drop_column('tasks', 'product')
    op.drop_column('tasks', 'epic_id')
    op.drop_column('tasks', 'custom_fields')
    op.drop_column('tasks', 'labels')
    op.drop_column('tasks', 'sprint_id')
    op.add_column('users', sa.Column('username', sa.String(length=100), nullable=False))
    op.add_column('users', sa.Column('hashed_password', sa.String(length=255), nullable=False))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('last_login', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('user', 'manager', 'admin', 'owner', name='UserRole'),
               nullable=True,
               existing_server_default=sa.text('\'user\'::"UserRole"'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.drop_index('users_email_key', table_name='users')
    op.drop_index('users_employee_id_key', table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_constraint('users_employee_id_fkey', 'users', type_='foreignkey')
    op.drop_column('users', 'employee_id')
    op.drop_column('users', 'password')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('password', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key('users_employee_id_fkey', 'users', 'employees', ['employee_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index('users_employee_id_key', 'users', ['employee_id'], unique=False)
    op.create_index('users_email_key', 'users', ['email'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('user', 'manager', 'admin', 'owner', name='UserRole'),
               nullable=False,
               existing_server_default=sa.text('\'user\'::"UserRole"'))
    op.alter_column('users', 'email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('users', 'last_login')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'hashed_password')
    op.drop_column('users', 'username')
    op.add_column('tasks', sa.Column('sprint_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('labels', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('epic_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('product', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('category', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('parent_task_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('story_points', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'tasks', type_='foreignkey')
    op.drop_constraint(None, 'tasks', type_='foreignkey')
    op.drop_constraint(None, 'tasks', type_='foreignkey')
    op.create_foreign_key('tasks_creator_id_fkey', 'tasks', 'employees', ['creator_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('tasks_company_id_fkey', 'tasks', 'companies', ['company_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('tasks_parent_task_id_fkey', 'tasks', 'tasks', ['parent_task_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key('tasks_assignee_id_fkey', 'tasks', 'employees', ['assignee_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('tasks_sprint_id_fkey', 'tasks', 'sprints', ['sprint_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key('tasks_epic_id_fkey', 'tasks', 'epics', ['epic_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_tasks_title'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.alter_column('tasks', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False)
    op.alter_column('tasks', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('tasks', 'assignee_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('tasks', 'is_favorite',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('tasks', 'tags',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('tasks', 'due_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=True)
    op.alter_column('tasks', 'priority',
               existing_type=sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='taskpriority'),
               type_=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('1'))
    op.alter_column('tasks', 'status',
               existing_type=postgresql.ENUM('new', 'inProgress', 'review', 'completed', 'postponed', name='TaskStatus'),
               nullable=False,
               existing_server_default=sa.text('\'new\'::"TaskStatus"'))
    op.alter_column('tasks', 'title',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('tasks', 'is_archived')
    op.drop_column('tasks', 'checklist')
    op.drop_column('tasks', 'completed_at')
    op.add_column('employees', sa.Column('status', postgresql.ENUM('active', 'inactive', 'terminated', name='EmployeeStatus'), server_default=sa.text('\'active\'::"EmployeeStatus"'), autoincrement=False, nullable=False))
    op.add_column('employees', sa.Column('schedule', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('employees', sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('employees', sa.Column('recruiter', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('employees', sa.Column('termination_date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True))
    op.add_column('employees', sa.Column('hr', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('employees', sa.Column('avatar', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'employees', type_='foreignkey')
    op.drop_constraint(None, 'employees', type_='foreignkey')
    op.drop_constraint(None, 'employees', type_='foreignkey')
    op.create_foreign_key('employees_department_id_fkey', 'employees', 'departments', ['department_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key('employees_company_id_fkey', 'employees', 'companies', ['company_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'employees', type_='unique')
    op.drop_index(op.f('ix_employees_id'), table_name='employees')
    op.drop_index(op.f('ix_employees_email'), table_name='employees')
    op.create_index('employees_email_key', 'employees', ['email'], unique=False)
    op.alter_column('employees', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False)
    op.alter_column('employees', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('employees', 'salary',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=12, scale=2),
               existing_nullable=True)
    op.alter_column('employees', 'hire_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False)
    op.alter_column('employees', 'birth_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False)
    op.alter_column('employees', 'position',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('employees', 'phone',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('employees', 'email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('employees', 'user_id')
    op.drop_column('employees', 'is_active')
    op.drop_column('employees', 'avatar_url')
    op.drop_column('employees', 'middle_name')
    op.drop_column('employees', 'last_name')
    op.drop_column('employees', 'first_name')
    op.drop_constraint(None, 'departments', type_='foreignkey')
    op.drop_constraint(None, 'departments', type_='foreignkey')
    op.drop_constraint(None, 'departments', type_='foreignkey')
    op.create_foreign_key('departments_company_id_fkey', 'departments', 'companies', ['company_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('departments_parent_id_fkey', 'departments', 'departments', ['parent_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_departments_name'), table_name='departments')
    op.drop_index(op.f('ix_departments_id'), table_name='departments')
    op.alter_column('departments', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False)
    op.alter_column('departments', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('departments', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('departments', 'name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('companies', sa.Column('logo', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('tax_id', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('industry', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_companies_name'), table_name='companies')
    op.drop_index(op.f('ix_companies_id'), table_name='companies')
    op.alter_column('companies', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False)
    op.alter_column('companies', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('companies', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('companies', 'phone',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('companies', 'email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('companies', 'website',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('companies', 'name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('companies', 'logo_url')
    op.create_table('courses',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('courses_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('author', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('participants', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('views', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('draft', 'active', 'archived', name='CourseStatus'), server_default=sa.text('\'draft\'::"CourseStatus"'), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='courses_company_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='courses_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('accounts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('currency', postgresql.ENUM('KZT', 'USD', 'RUB', 'EUR', name='Currency'), autoincrement=False, nullable=False),
    sa.Column('balance', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('bank', 'cash', 'card', name='AccountType'), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='accounts_company_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='accounts_pkey')
    )
    op.create_table('task_dependencies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('depends_on_task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('blocks', 'relatedTo', 'duplicates', name='DependencyType'), server_default=sa.text('\'blocks\'::"DependencyType"'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['depends_on_task_id'], ['tasks.id'], name='task_dependencies_depends_on_task_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='task_dependencies_task_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_dependencies_pkey')
    )
    op.create_index('task_dependencies_task_id_depends_on_task_id_key', 'task_dependencies', ['task_id', 'depends_on_task_id'], unique=False)
    op.create_table('task_watchers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='task_watchers_task_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_watchers_pkey')
    )
    op.create_index('task_watchers_task_id_employee_id_key', 'task_watchers', ['task_id', 'employee_id'], unique=False)
    op.create_table('transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type', postgresql.ENUM('income', 'expense', name='TransactionType'), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', postgresql.ENUM('KZT', 'USD', 'RUB', 'EUR', name='Currency'), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('project', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('counterparty', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('account', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='transactions_company_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_id'], ['employees.id'], name='transactions_created_by_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey')
    )
    op.create_table('epics',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('epics_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('color', sa.TEXT(), server_default=sa.text("'#3B82F6'::text"), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'completed', 'archived', name='EpicStatus'), server_default=sa.text('\'active\'::"EpicStatus"'), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='epics_company_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='epics_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('lessons',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('course_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('order_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='lessons_course_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lessons_pkey')
    )
    op.create_table('time_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='time_logs_task_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='time_logs_pkey')
    )
    op.create_table('sprints',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sprints_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('goal', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('planning', 'active', 'completed', 'cancelled', name='SprintStatus'), server_default=sa.text('\'planning\'::"SprintStatus"'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='sprints_company_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sprints_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('news',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('news_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('author', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('likes', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='news_company_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='news_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('task_comments',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('changes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='task_comments_task_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_comments_pkey')
    )
    op.create_table('quizzes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('quizzes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('article_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('questions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('passing_score', sa.INTEGER(), server_default=sa.text('70'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['article_id'], ['knowledge_articles.id'], name='quizzes_article_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='quizzes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('knowledge_articles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('knowledge_articles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('folder_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('views', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('author', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('cover_image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('icon', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='knowledge_articles_company_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['folder_id'], ['knowledge_folders.id'], name='knowledge_articles_folder_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='knowledge_articles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('knowledge_folders',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('knowledge_folders_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='knowledge_folders_company_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['knowledge_folders.id'], name='knowledge_folders_parent_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='knowledge_folders_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('_CourseToProgram',
    sa.Column('A', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('B', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['A'], ['courses.id'], name='_CourseToProgram_A_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['B'], ['programs.id'], name='_CourseToProgram_B_fkey', onupdate='CASCADE', ondelete='CASCADE')
    )
    op.create_index('_CourseToProgram_B_index', '_CourseToProgram', ['B'], unique=False)
    op.create_index('_CourseToProgram_AB_unique', '_CourseToProgram', ['A', 'B'], unique=False)
    op.create_table('programs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('participants', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('course_ids', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='programs_company_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='programs_pkey')
    )
    op.create_table('news_comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('news_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('author', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('author_avatar', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['news_id'], ['news.id'], name='news_comments_news_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='news_comments_pkey')
    )
    op.create_table('checklist_items',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='checklist_items_task_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='checklist_items_pkey')
    )
    op.create_table('quiz_attempts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('quiz_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('answers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('passed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['quiz_id'], ['quizzes.id'], name='quiz_attempts_quiz_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='quiz_attempts_pkey')
    )
    op.drop_index(op.f('ix_passwords_id'), table_name='passwords')
    op.drop_table('passwords')
    op.drop_index(op.f('ix_password_categories_id'), table_name='password_categories')
    op.drop_table('password_categories')
    # ### end Alembic commands ###
